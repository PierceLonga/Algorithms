{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Pierce","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#pierce","text":"","title":"Pierce"},{"location":"arrays/","text":"Arrays An array is a special variable, which can hold more than one value at a time. If you have a list of items (a list of car names, for example), storing the cars in single variables could look like this: Demonstrate Array ''' array = [] ''' car1 = \"Ford\" car2 = \"Volvo\" car3 = \"BMW\" However, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300? The solution is an array! An array can hold many values under a single name, and you can access the values by referring to an index number. https://www.w3schools.com/js/default.asp","title":"Arrays"},{"location":"arrays/#arrays","text":"An array is a special variable, which can hold more than one value at a time. If you have a list of items (a list of car names, for example), storing the cars in single variables could look like this:","title":"Arrays"},{"location":"arrays/#demonstrate-array","text":"''' array = [] ''' car1 = \"Ford\" car2 = \"Volvo\" car3 = \"BMW\" However, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300? The solution is an array! An array can hold many values under a single name, and you can access the values by referring to an index number. https://www.w3schools.com/js/default.asp","title":"Demonstrate Array"},{"location":"graphs/","text":"Graphs A graph can be easily presented using the python dictionary data types. We represent the vertices as the keys of the dictionary and the connection between the vertices also called edges as the values in the dictionary. https://www.tutorialspoint.com/python_data_structure/python_graphs.htm#:~:text=A%20graph%20can%20be%20easily,the%20values%20in%20the%20dictionary. # Create the dictionary with graph elements graph = { \"a\" : [\"b\",\"c\"], \"b\" : [\"a\", \"d\"], \"c\" : [\"a\", \"d\"], \"d\" : [\"e\"], \"e\" : [\"d\"] } # Print the graph print(graph)","title":"Graphs"},{"location":"graphs/#graphs","text":"A graph can be easily presented using the python dictionary data types. We represent the vertices as the keys of the dictionary and the connection between the vertices also called edges as the values in the dictionary. https://www.tutorialspoint.com/python_data_structure/python_graphs.htm#:~:text=A%20graph%20can%20be%20easily,the%20values%20in%20the%20dictionary. # Create the dictionary with graph elements graph = { \"a\" : [\"b\",\"c\"], \"b\" : [\"a\", \"d\"], \"c\" : [\"a\", \"d\"], \"d\" : [\"e\"], \"e\" : [\"d\"] } # Print the graph print(graph)","title":"Graphs"},{"location":"hash%20tables/","text":"Hash Tables Hash tables are a type of data structure in which the address or the index value of the data element is generated from a hash function. That makes accessing the data faster as the index value behaves as a key for the data value. In other words Hash table stores key-value pairs but the key is generated through a hashing function. So the search and insertion function of a data element becomes much faster as the key values themselves become the index of the array which stores the data. In Python, the Dictionary data types represent the implementation of hash tables. The Keys in the dictionary satisfy the following requirements. \u2022 The keys of the dictionary are hashable i.e. the are generated by hashing function which generates unique result for each unique value supplied to the hash function. \u2022 The order of data elements in a dictionary is not fixed. So we see the implementation of hash table by using the dictionary data types as below. https://www.tutorialspoint.com/python_data_structure/python_hash_table.htm # Declare a dictionary dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'} # Accessing the dictionary with its key print \"dict['Name']: \", dict['Name'] print \"dict['Age']: \", dict['Age']","title":"Hash Tables"},{"location":"hash%20tables/#hash-tables","text":"Hash tables are a type of data structure in which the address or the index value of the data element is generated from a hash function. That makes accessing the data faster as the index value behaves as a key for the data value. In other words Hash table stores key-value pairs but the key is generated through a hashing function. So the search and insertion function of a data element becomes much faster as the key values themselves become the index of the array which stores the data. In Python, the Dictionary data types represent the implementation of hash tables. The Keys in the dictionary satisfy the following requirements. \u2022 The keys of the dictionary are hashable i.e. the are generated by hashing function which generates unique result for each unique value supplied to the hash function. \u2022 The order of data elements in a dictionary is not fixed. So we see the implementation of hash table by using the dictionary data types as below. https://www.tutorialspoint.com/python_data_structure/python_hash_table.htm # Declare a dictionary dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'} # Accessing the dictionary with its key print \"dict['Name']: \", dict['Name'] print \"dict['Age']: \", dict['Age']","title":"Hash Tables"},{"location":"linked%20lists/","text":"Linked lists A linked list is a collection of nodes. The first node is called the head , and it's used as the starting point for any iteration through the list. The last node must have its next reference pointing to None to determine the end of the list. Each element of a linked list is called a node, and every node has two different fields: 1. Data contains the value to be stored in the node. 2. Next contains a reference to the next node on the list. https://realpython.com/linked-lists-python/#:~:text=A%20linked%20list%20is%20a,the%20end%20of%20the%20list. Demonstrate Linked List graph = { 1: [2, 3, None], 2: [4, None], 3: [None], 4: [5, 6, None], 5: [6, None], 6: [None] }","title":"Linked Lists"},{"location":"linked%20lists/#linked-lists","text":"A linked list is a collection of nodes. The first node is called the head , and it's used as the starting point for any iteration through the list. The last node must have its next reference pointing to None to determine the end of the list. Each element of a linked list is called a node, and every node has two different fields: 1. Data contains the value to be stored in the node. 2. Next contains a reference to the next node on the list. https://realpython.com/linked-lists-python/#:~:text=A%20linked%20list%20is%20a,the%20end%20of%20the%20list.","title":"Linked lists"},{"location":"linked%20lists/#demonstrate-linked-list","text":"graph = { 1: [2, 3, None], 2: [4, None], 3: [None], 4: [5, 6, None], 5: [6, None], 6: [None] }","title":"Demonstrate Linked List"},{"location":"lists/","text":"Lists Lists are used to store multiple items in a single variable. Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage. Lists are created using square brackets: thislist = [\"apple\", \"banana\", \"cherry\"] print(thislist)","title":"Lists"},{"location":"lists/#lists","text":"Lists are used to store multiple items in a single variable. Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage. Lists are created using square brackets: thislist = [\"apple\", \"banana\", \"cherry\"] print(thislist)","title":"Lists"},{"location":"pierce/","text":"Lists Lists are used to store multiple items in a single variable. Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage. Lists are created using square brackets: https://www.w3schools.com/python/python_lists.asp my_list = []","title":"Pierce"},{"location":"pierce/#lists","text":"Lists are used to store multiple items in a single variable. Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage. Lists are created using square brackets: https://www.w3schools.com/python/python_lists.asp my_list = []","title":"Lists"},{"location":"queues/","text":"Queues A queue is a collection of objects that supports fast first-in, first-out (FIFO) semantics for inserts and deletes. The insert and delete operations sometimes called enqueue and dequeue. Unlike lists or arrays, queues typically don't allow for random access to the objects they contain. https://dbader.org/blog/queues-in-python#:~:text=A%20queue%20is%20a%20collection,to%20the%20objects%20they%20contain. # How to use Python's list as a FIFO queue: ''' ''' q = [] q.append('eat') q.append('sleep') q.append('code') >>> q ['eat', 'sleep', 'code'] # Careful: This is slow! >>> q.pop(0) 'eat'","title":"Queues"},{"location":"queues/#queues","text":"A queue is a collection of objects that supports fast first-in, first-out (FIFO) semantics for inserts and deletes. The insert and delete operations sometimes called enqueue and dequeue. Unlike lists or arrays, queues typically don't allow for random access to the objects they contain. https://dbader.org/blog/queues-in-python#:~:text=A%20queue%20is%20a%20collection,to%20the%20objects%20they%20contain. # How to use Python's list as a FIFO queue: ''' ''' q = [] q.append('eat') q.append('sleep') q.append('code') >>> q ['eat', 'sleep', 'code'] # Careful: This is slow! >>> q.pop(0) 'eat'","title":"Queues"},{"location":"sets/","text":"Sets Sets are used to store multiple items in a single variable. Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with different qualities and usage. A set is a collection which is unordered, unchangeable*, and unindexed. https://www.w3schools.com/python/python_sets.asp thisset = {\"apple\", \"banana\", \"cherry\"} print(thisset)","title":"Sets"},{"location":"sets/#sets","text":"Sets are used to store multiple items in a single variable. Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with different qualities and usage. A set is a collection which is unordered, unchangeable*, and unindexed. https://www.w3schools.com/python/python_sets.asp thisset = {\"apple\", \"banana\", \"cherry\"} print(thisset)","title":"Sets"},{"location":"stack/","text":"Stack A stack is a linear data structure that stores items in a Last-In/First-Out (LIFO) or First-In/Last-Out (FILO) manner. In stack, a new element is added at one end and an element is removed from that end only. The insert and delete operations are often called push and pop. https://www.geeksforgeeks.org/stack-in-python/#:~:text=A%20stack%20is%20a%20linear,often%20called%20push%20and%20pop. ```# Python program to demonstrate stack implementation using list stack = [] append() function to push element in the stack stack.append('a') stack.append('b') stack.append('c') print('Initial stack') print(stack) pop() function to pop element from stack in LIFO order print('\\nElements popped from stack:') print(stack.pop()) print(stack.pop()) print(stack.pop()) print('\\nStack after elements are popped:') print(stack) uncommenting print(stack.pop()) will cause an IndexError as the stack is now empty","title":"Stack"},{"location":"stack/#stack","text":"A stack is a linear data structure that stores items in a Last-In/First-Out (LIFO) or First-In/Last-Out (FILO) manner. In stack, a new element is added at one end and an element is removed from that end only. The insert and delete operations are often called push and pop. https://www.geeksforgeeks.org/stack-in-python/#:~:text=A%20stack%20is%20a%20linear,often%20called%20push%20and%20pop. ```# Python program to","title":"Stack"},{"location":"stack/#demonstrate-stack-implementation-using-list","text":"stack = []","title":"demonstrate stack implementation  using list"},{"location":"stack/#append-function-to-push-element-in-the-stack","text":"stack.append('a') stack.append('b') stack.append('c') print('Initial stack') print(stack) pop() function to pop element from stack in LIFO order print('\\nElements popped from stack:') print(stack.pop()) print(stack.pop()) print(stack.pop()) print('\\nStack after elements are popped:') print(stack) uncommenting print(stack.pop()) will cause an IndexError as the stack is now empty","title":"append() function to push element in the stack"},{"location":"trees/","text":"Trees A Tree is a Data structure in which data items are connected using references in a hierarchical manner. Each Tree consists of a root node from which we can access each element of the tree. https://www.pythonforbeginners.com/data-structures/tree-data-structure-in-python#:~:text=Conclusion-,What%20is%20a%20Tree%20Data%20Structure%20in%20Python%3F,each%20element%20of%20the%20tree. class BinaryTreeNode: def __init__(self, data): self.data = data self.leftChild = None self.rightChild=None","title":"Trees"},{"location":"trees/#trees","text":"A Tree is a Data structure in which data items are connected using references in a hierarchical manner. Each Tree consists of a root node from which we can access each element of the tree. https://www.pythonforbeginners.com/data-structures/tree-data-structure-in-python#:~:text=Conclusion-,What%20is%20a%20Tree%20Data%20Structure%20in%20Python%3F,each%20element%20of%20the%20tree. class BinaryTreeNode: def __init__(self, data): self.data = data self.leftChild = None self.rightChild=None","title":"Trees"}]}